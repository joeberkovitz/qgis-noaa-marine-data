# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CompassRoutes
                                 A QGIS plugin
 This plugin creates layers that automatically label route legs with distance and magnetic bearing
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-05
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Joe Berkovitz
        email                : joseph.berkovitz@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QTimeZone, QDateTime, QByteArray
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction

from qgis.core import (
    Qgis, QgsApplication, QgsCoordinateTransform, QgsCoordinateReferenceSystem,
    QgsUnitTypes, QgsWkbTypes, QgsGeometry, QgsFields, QgsField,
    QgsProject, QgsVectorLayer, QgsFeature, QgsPoint, QgsPointXY, QgsLineString, QgsDistanceArea,
    QgsArrowSymbolLayer, QgsLineSymbol, QgsSingleSymbolRenderer,
    QgsPalLayerSettings, QgsVectorLayerSimpleLabeling, QgsSettings,QgsExpression,QgsExpressionContextUtils)

from qgis.core import qgsfunction

from qgis.utils import iface

from datetime import *
import math

# Initialize Qt resources from file resources.py
from .resources import *
from .utils import *
from .provider import NoaaTidalPredictionsProvider
from .prediction_expressions import PredictionExpressions

import os.path
import processing

class NoaaTidalPredictions:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NoaaTidalPredictions_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            translator = QTranslator()
            translator.load(locale_path)
            QCoreApplication.installTranslator(translator)

        # Declare instance attributes
        self.actions = []
        self.menu = tr(u'&NOAA Tidal Predictions')
        PredictionExpressions.registerFunctions()

    def initProcessing(self):
        self.provider = NoaaTidalPredictionsProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        checkable_flag=False,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        if checkable_flag:
            action.setCheckable(True)

        self.actions.append(action)

        return action

    def initGui(self):
        self.initProcessing()
        
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.add_action(
            os.path.join(self.plugin_dir, 'svg/add_current_stations_layer.svg'),
            text=tr(u'Add Tidal Data Layers'),
            callback=self.addStationsLayer,
            parent=self.iface.mainWindow())

        self.add_action(
            os.path.join(self.plugin_dir, 'svg/add_current_stations_layer.svg'),
            text=tr(u'Export Clustered Predictions'),
            callback=self.exportClusteredPredictions,
            parent=self.iface.mainWindow())

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.menu,
                action)

        QgsApplication.processingRegistry().removeProvider(self.provider)

        PredictionExpressions.unregisterFunctions()

    def addStationsLayer(self):
        processing.execAlgorithmDialog('NoaaTidalPredictions:addtidalstationslayer', {})

    def exportClusteredPredictions(self):
        processing.execAlgorithmDialog('NoaaTidalPredictions:exportclusteredpredictions', {})
